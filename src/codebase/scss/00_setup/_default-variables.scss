// BASICS: DEFAULT VARIABLES
// ~~~~~~~~~~~~~~~~~~~~~~~~~

@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:map";

// INDEX
// ===== 
// (1.) Toggles
// (2.) Color maps
// (3.) Decoration maps â€“ used in utilities and components
// (4.) Root variables
// (5.) Media query mixins

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (1.) Toggles ////////////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$font-size-bump: true !default;
$link-color-visited: false !default;
$form-input-background-color: false !default;
$form-input-rounded-corners: true !default;
$button-rounded-corners: true !default;
$label-rounded-corners: true !default;
$ui-color-utilities: true !default;
$color-shade-utilities: true !default;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (2.) Color maps /////////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Colors were initially chosen for use in in UI buttons, badges and labels. 
// But then these have also been used for the default color swatches.

// Codebase 5 UI colors chosen to conform to WCAG 2.1 Level AA accessibility 
// guidelines for text (white): color contrast ratio of 4.5:1 or better (see 
// https://www.w3.org/TR/WCAG21/). These are equivalent to the -600 shade of 
// each color.

// You can override the theme color names (in the Sass map below) and their hex 
// values (in the :root {}), and the Sass generators will rebuild the Codebase 
// utility classes accordingly (text colors, border colors, background colors).

$theme-color: (
  "blue": var(--blue),
  "green": var(--green),
  "amber": var(--amber),
  "red": var(--red),
  "purple": var(--purple),
  "teal": var(--teal),
  "gray": var(--gray),
);

$ui-color: (
  "info": var(--c-info),
  "success": var(--c-success),
  "warning": var(--c-warning),
  "danger": var(--c-danger),
  "primary": var(--c-primary),
  "secondary": var(--c-secondary),
  "tertiary": var(--c-tertiary),
);

// These colors are used for UI elements, and they are used for the color utilities, at the `-600` shade level.

$lightness: (
  "100": white 90%,
  "200": white 72%,
  "300": white 54%,
  "400": white 36%,
  "500": white 18%,
  "600": black 0%,
  "700": black 18%,
  "800": black 36%,
  "900": black 54%
);

$ui-setup: (
  // Used by buttons, badges, and labels
  // "key": = (val1, val2, val3, val4),
  // val1 = UI component border and background color
  // val2 = UI component border and background color on :hover (buttons only)
  // val3 = UI component text color
  // val4 = UI component text color on :hover (buttons only)
  "info": (#{var(--c-info)}, #{var(--c-info-hover)}, #fff, #fff),
  "success": (#{var(--c-success)}, #{var(--c-success-hover)}, #fff, #fff),
  "warning": (#{var(--c-warning)}, #{var(--c-warning-hover)}, #000, #000),
  "danger": (#{var(--c-danger)}, #{var(--c-danger-hover)}, #fff, #fff),
  "primary": (#{var(--c-primary)}, #{var(--c-primary-hover)}, #fff, #fff),
  "secondary": (#{var(--c-secondary)}, #{var(--c-secondary-hover)}, #fff, #fff),
  "tertiary": (#{var(--c-tertiary)}, #{var(--c-tertiary-hover)}, #fff, #fff),
);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (3.) Decoration maps ////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Codebase component decoration is all controlled by the following set of 
// decoration variables. These same variables are used throughout Codebase 
// typography, components and utilities.

// Element grid
// ============
// Throughout the Codebase SCSS, an element grid has been used wherever 
// possible. In other words, line-heights, margins and paddings have been set at 
// increments of 1 element grid unit. In addition, a set of margin and padding 
// decoration utility classes are generated with increments of 1 element grid 
// unit.

// 1 element grid unit = 0.5rem (8px, default)

// Note: "2" (= 1rem) is also the  height of 1 line of default text (paragraphs, 
// list-items, form inputs, etc.)

$spacing: (
  "0": 0,
  "1": 0.5rem,
  "2": 1rem,
  "3": 1.5rem,
  "4": 2rem,
  "5": 2.5rem,
  "6": 3rem,
);

$spacing-setup: (
  "0": 0,
  "1": #{var(--sp-1)},
  "2": #{var(--sp-2)},
  "3": #{var(--sp-3)},
  "4": #{var(--sp-4)},
  "5": #{var(--sp-5)},
  "6": #{var(--sp-6)},
);

// Borders
$borders: (
  "b": "border",
  "bt": "border-top",
  "br": "border-right",
  "bb": "border-bottom",
  "bl": "border-left"
);

// Widths (256px increments. Used for media query breakpoints, containers, 
// and width utilities)
$width: (
  "w-xxs": 256px,
  "w-xs": 512px,
  "w-sm": 768px,
  "w-md": 1024px,
  "w-lg": 1280px,
  "w-xl": 1536px,
  "w-xxl": 1792px
);

$mq-width: (
  // media query widths used in loops for inline-flex, flex, gap, 
  // margins, paddings, text alignment, floats
  "xs": "w-xs",
  "sm": "w-sm",
  "md": "w-md",
  "lg": "w-lg",
);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (4.) Root Variables /////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:root {
  --font-base: ui-sans-serif, system-ui, sans-serif;
  --font-serif: ui-serif, Cambria, "Times New Roman", Times, serif;
  --font-mono: ui-monospace, Menlo, Consolas, "Courier New", monospace;
  --font-sans-serif: var(--font-base);
  --font-ui: var(--font-base);
  --font-brand: var(--font-base);
  --font-prose: var(--font-serif);

  // The Codebase default theme colors UI colors -- see below. 
  // But you can change that, because they are declared separately.

  // Theme colors
  --blue: #1262ed;
  --green: #128a12;
  --amber: #e6de00;
  --red: #cf000f;
  --purple: #9400d3;
  --teal: #0080A2;
  --gray: #767676;

  // UI colors -- equate to the -600 shade of each named color (see the $lightness() map)
  --c-info: var(--blue);
  --c-success: var(--green);
  --c-warning: var(--amber);
  --c-danger: var(--red);
  --c-primary: var(--purple);
  --c-secondary: var(--teal);
  --c-tertiary: var(--gray);

  // UI colors on :hover -- equate to the -700 shade of each named color (see the $lightness() map)
  --c-warning-hover: color-mix(in OKLAB, var(--c-warning), black 18%);
  --c-danger-hover: color-mix(in OKLAB, var(--c-danger), black 18%);
  --c-success-hover: color-mix(in OKLAB, var(--c-success), black 18%);
  --c-info-hover: color-mix(in OKLAB, var(--c-info), black 18%);
  --c-primary-hover: color-mix(in OKLAB, var(--c-primary), black 18%);
  --c-secondary-hover: color-mix(in OKLAB, var(--c-secondary), black 18%);
  --c-tertiary-hover: color-mix(in OKLAB, var(--c-tertiary), black 18%);

  // Color shades variables generator
  @each $key,
  $val in $theme-color {
    @each $key2,
    $val2 in $lightness {
      --#{$key}-#{$key2}: color-mix(in OKLAB, #{$val}, #{$val2});
    }
  }

  // Base theme colors
  --c-page-bg: #ffffff;
  --c-page-bg-alt: var(--gray-100);
  --c-detail: rgba(0,0,0,0.15);
  --c-default: var(--gray-600);
  --c-text: var(--gray-900);
  --c-link: var(--blue-600);
  --c-link-hover: var(--blue-800);
  --c-link-visited: var(--purple-700);
  --c-form-bg: var(--gray-100);
  --c-btn-text: var(--gray-900);
  --c-btn-hover: var(--gray-100);
  --c-highlight: rgba(255, 122, 89, 0.32);
  --c-selection: rgba(0, 189, 165, 0.4);
  --c-code: var(--teal-700);
  --c-code-b: var(--teal-200);
  --c-code-bg: var(--teal-100);

  // Glassmorphic backgrounds
  --alpha-1: 0.1;
  --alpha-2: 0.25;
  --alpha-3: 0.4;
  --alpha-4: 0.55;
  --alpha-5: 0.7;
  --glass-1: saturate(1.8) blur(1px);
  --glass-2: saturate(1.8) blur(4px);
  --glass-3: saturate(1.8) blur(8px);
  --glass-4: saturate(1.8) blur(13px);
  --glass-5: saturate(1.8) blur(19px);

  // State transition (used on button hover, link hover, and color utility hover)
  --ease: all 0.15s ease-in-out;

  // Link underlines
  --link-underline: 1px;
  --link-underline-hover: 2px;
  --link-underline-offset: 0.25em;

  // Width variables generator
  @each $name,
  $value in $width {
    --#{$name}: #{$value};
  }

  // Spacing variables generator (paddings, margins, and gaps)
  @each $name,
  $value in $spacing {
    --sp-#{$name}: #{$value};
  }

  --sp-cell: 0.5rem 1rem;

  // Borders
  --b-thin: 1px; // used by b-thin, b-dashed, and --line-detail (hr, .table, form inputs, etc.)
  --b-thick: 4px; // used by b-thick
  --b-heavy: 8px; // used by b-heavy

  --line-detail: var(--b-thin) solid var(--c-detail); // used on hr, table cell borders, inputs, classic tabs.

  // Border radius for rounded corners
  --rad-sm: .25rem; // 4px default
  --rad-md: .5rem; // 8px default
  --rad: var(--rad-md);
  --rad-lg: 1rem; // 16px default
  --rad-xl: 2.5rem; // 40px default
  --rad-pill: 99rem;

  // Containers
  --container: var(--w-xxl);
  --container-x: 1rem;

  // Squares (for icons, avatars, etc.)
  --sq-sm: 3rem;
  --sq: 4.5rem;
  --sq-lg: 6rem;

  // Forms and buttons
  // See also --c-form-* and --c-btn-* in colors above
  --form-b: var(--b-thin); // border
  --form-font: var(--font-ui);
  --form-size-sm: 2rem; // height
  --form-size: 2.5rem;
  --form-size-lg: 3rem;
  --form-size-sm-fs: 0.8325em; // font-size
  --form-size-lg-fs: 1.325em;
  --form-p-sm: 0.25rem 0.5rem; // padding
  --form-p: .5rem;
  --form-p-lg: .75rem;
  --btn: 600;
  --btn-p-sm: .25rem .75rem;
  --btn-p: .5rem 1rem;
  --btn-p-lg: .75rem 1.75rem;

  // Text
  --t-fs: 100%; // usually 16px
  --t-fs-bump: 112.5%; // usually 18px
  --t-base-lh: 1.5; // line-height
  --t-base-mb: 1rem; // margin-bottom (2 element grid units)
  --t-thin: 200;
  --t-normal: 400;
  --t-semibold: 600;
  --t-bold: 700;
  --t-heavy: 900;
  --t-line-offset: 2px;
  --t-cols-gap: clamp(1.5rem, 2.5vw, 2.5rem);
  --t-cols: 17.5em;
  --t-sm: .875em;
  --t-lg: 1.325em;
  --t-display: clamp(1.25em, 0.75em + 1.5625vw, 2em);
  --t-long-read: clamp(1em, 0.8333em + 0.5208vw, 1.25em);
  --bq-fs: var(--t-fs); // blockquote
  --bq-x: 2.5vw;
  --hr: var(--b-thin); // horizontal rule
  --hr-y: var(--t-base-lh);

  // Headings
  --h1: 2.25em; // 36px
  --h2: 1.875em; // 30px
  --h3: 1.5em; // 24px
  --h4: 1.25em; // 20px
  --h5: 1.125em; // 18px
  --h6: 1em; // 16px
  --hd-weight: var(--t-semibold);
  --hd-lh: calc(1em + .5rem); // gives .5rem more than the headingâ€™s own size
  --hd-m-block: 2rem 1rem;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (5.) Media query mixins /////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@mixin break-min($min-width) {
  @media (min-width: map.get($width, $min-width)) {
    @content;
  }
}

@mixin break-max($max-width) {
  @media (max-width: (map.get($width, $max-width) - 1px)) {
    @content;
  }
}