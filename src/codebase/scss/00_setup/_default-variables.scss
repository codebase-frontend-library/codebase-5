// BASICS: DEFAULT VARIABLES
// ~~~~~~~~~~~~~~~~~~~~~~~~~

@use "sass:math";

// INDEX
// ===== 
// (1.) Toggles
// (2.) Colors
// (3.) Decoration â€“ used in utilities and components
// (4.) Root variables
// (5.) Media query mixins

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (1.) Toggles ////////////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$link-color-visited: false !default;
$form-input-background-color: false !default;
$form-input-rounded-corners: true !default;
$button-rounded-corners: true !default;
$label-rounded-corners: true !default;
$color-shade-utilities: true !default;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (2.) Colors /////////////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Colors were initially chosen for use in in UI buttons, badges and labels. 
// But then these have also been used for the default color swatches.

// Codebase 5 UI colors chosen to conform to WCAG 2.1 Level AA accessibility 
// guidelines for text (white): color contrast ratio of 4.5:1 or better (see 
// https://www.w3.org/TR/WCAG21/ ). These are equivalent to the -600 shade of 
// each color.

// You can override the color names and their hex values, and the Sass 
// generators will rebuild Codebase accordingly -- i.e. the color variables 
// generator in the :root {}, and the class generators in buttons, badges, 
// labels, and color utilities.

// The Codebase default $theme-color:() are identical to #ui-color:() 
// But you can cgange that, because they are declared separately

$theme-color: (
  "blue": #1262ed,
  "green": #128a12,
  "amber": #f0b300,
  "red": #cf000f,
  "purple": #9400d3,
  "teal": #0d98ba,
  "gray": #767676,
);

$ui-color: (
  "info": #1262ed,
  "success": #128a12,
  "warning": #F5D042,
  "danger": #cf000f,
  "primary": #9400d3,
  "secondary":#0d98ba,
  "tertiary": #767676,
);

// These colors are used for UI elements, and they are used for the color utilities, at the `-600` shade level.

$shade: (
  "100": (white, 90%),
  "200": (white, 72%),
  "300": (white, 54%),
  "400": (white, 36%),
  "500": (white, 18%),
  "600": (black, 0%),
  "700": (black, 18%),
  "800": (black, 36%),
  "900": (black, 54%)
);

$ui-color-states: (
  // By default, using the same colors. However, you can override any color,
  // because as all variables for named color swatches and ui-colors are  
  // available in the :root{}
  "info": #{map-get($ui-color, "info")},
  "success": #{map-get($ui-color, "success")},
  "warning": #{map-get($ui-color, "warning")},
  "danger": #{map-get($ui-color, "danger")},
  "primary": #{map-get($ui-color, "primary")},
  "secondary": #{map-get($ui-color, "secondary")},
  "tertiary": #{map-get($ui-color, "tertiary")},

  "info-hover": #{mix(black, map-get($ui-color, "info"), 18%)},
  "success-hover": #{mix(black, map-get($ui-color, "success"), 18%)},
  "warning-hover": #{mix(black, map-get($ui-color, "warning"), 18%)},
  "danger-hover": #{mix(black, map-get($ui-color, "danger"), 18%)},
  "primary-hover": #{mix(black, map-get($ui-color, "primary"), 18%)},
  "secondary-hover": #{mix(black, map-get($ui-color, "secondary"), 18%)},
  "tertiary-hover": #{mix(black, map-get($ui-color, "tertiary"), 18%)},
);

$ui-setup: (
  // Used by buttons, badges, and labels
  // "key": = (val1, val2, val3, val4),
  // val1 = UI component border and background color
  // val2 = UI component border and background color on :hover (buttons only)
  // val3 = UI component text color
  // val4 = UI component text color on :hover (buttons only)
  "info": (#{var(--c-info)}, #{var(--c-info-hover)}, #fff, #fff),
  "success": (#{var(--c-success)}, #{var(--c-success-hover)}, #fff, #fff),
  "warning": (#{var(--c-warning)}, #{var(--c-warning-hover)}, #000, #000),
  "danger": (#{var(--c-danger)}, #{var(--c-danger-hover)}, #fff, #fff),
  "primary": (#{var(--c-primary)}, #{var(--c-primary-hover)}, #fff, #fff),
  "secondary": (#{var(--c-secondary)}, #{var(--c-secondary-hover)}, #fff, #fff),
  "tertiary": (#{var(--c-tertiary)}, #{var(--c-tertiary-hover)}, #fff, #fff),
);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (3.) Decoration /////////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Codebase component decoration is all controlled by the following set of 
// decoration variables. These same variables are used throughout Codebase 
// typography, components and utilities.

// Element grid
// ============
// Throughout the Codebase SCSS, an element grid has been used wherever 
// possible. In other words, line-heights, margins and paddings have been set at 
// increments of 1 element grid unit. In addition, a set of margin and padding 
// decoration utility classes are generated with increments of 1 element grid 
// unit.

// 1 element grid unit = 0.5rem (8px, default)

// Note: "3" is also the  height of 1 line of default text (paragraphs, 
// list-items, form inputs, etc.)
$spacing: (
  "0": 0,
  "1": 0.5rem,
  "2": 1rem,
  "3": 1.5rem,
  "4": 2rem,
  "5": 2.5rem,
  "6": 3rem,
);

$spacing-setup: (
  "0": 0,
  "1": #{var(--sp-1)},
  "2": #{var(--sp-2)},
  "3": #{var(--sp-3)},
  "4": #{var(--sp-4)},
  "5": #{var(--sp-5)},
  "6": #{var(--sp-6)},
);

// Borders

$borders: (
  "b": "border",
  "bt": "border-top",
  "br": "border-right",
  "bb": "border-bottom",
  "bl": "border-left"
);

// Widths (256px increments. Used for media query breakpoints, containers, 
// and width utilities)
$width: (
  "w-xxs": 256px,
  "w-xs": 512px,
  "w-sm": 768px,
  "w-md": 1024px,
  "w-lg": 1280px,
  "w-xl": 1536px,
  "w-xxl": 1792px
);

$mq-width: (
  // media query widths used in loops for inline-flex, flex, gap, 
  // margins, paddings, text alignment, floats
  "xs": "w-xs",
  "sm": "w-sm",
  "md": "w-md",
  "lg": "w-lg",
);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (4.) Root Variables /////////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:root {
  // Font stacks based on https://systemfontstack.com
  --font-base: -apple-system, BlinkMacSystemFont, "Avenir Next", Avenir, "Segoe UI", "Helvetica Neue", Helvetica, Cantarell, Ubuntu, Roboto, Noto, Arial, sans-serif;
  --font-mono: Menlo, Consolas, Monaco, "Liberation Mono", "Lucida Console", monospace;
  --font-serif: "Iowan Old Style", "Apple Garamond", Baskerville, "Times New Roman", "Droid Serif", Times, "Source Serif Pro", serif;
  --font-sans-serif: var(--font-base);
  --font-ui: var(--font-base);
  --font-brand: var(--font-base);
  --font-prose: var(--font-serif);

  // UI colors -- equate to the -600 shade of each named color (see the $shade() map)
  --c-info: #{map-get($ui-color-states, "info")};
  --c-success: #{map-get($ui-color-states, "success")};
  --c-warning: #{map-get($ui-color-states, "warning")};
  --c-danger: #{map-get($ui-color-states, "danger")};
  --c-primary: #{map-get($ui-color-states, "primary")};
  --c-secondary: #{map-get($ui-color-states, "secondary")};
  --c-tertiary: #{map-get($ui-color-states, "tertiary")};

  // UI colors on :hover -- equate to the -700 shade of each named color (see the $shade() map)
  --c-warning-hover: #{map-get($ui-color-states, "warning-hover")};
  --c-danger-hover: #{map-get($ui-color-states, "danger-hover")};
  --c-success-hover: #{map-get($ui-color-states, "success-hover")};
  --c-info-hover: #{map-get($ui-color-states, "info-hover")};
  --c-primary-hover: #{map-get($ui-color-states, "primary-hover")};
  --c-secondary-hover: #{map-get($ui-color-states, "secondary-hover")};
  --c-tertiary-hover: #{map-get($ui-color-states, "tertiary-hover")};

  // Color variable generator
  @each $key,
  $val in $theme-color {

    @each $key2,
    $val2 in $shade {
      --#{$key}-#{$key2}: #{mix(nth($val2, 1), $val, nth($val2, 2))};
    }
  }

  // Base theme colors
  --c-page-bg: #ffffff;
  --c-page-bg-alt: var(--gray-100);
  --c-detail: #{transparentize(#000000, .85)}; // ~ var(--gray-200);
  --c-default: var(--c-tertiary);
  --c-text: var(--gray-900);
  --c-form-focus: var(--blue-300);
  --c-link: var(--blue-600);
  --c-link-hover: var(--blue-700);
  --c-link-visited: var(--purple-700);
  --c-form-bg: var(--gray-100);
  --c-btn-text: var(--gray-900);
  --c-btn-hover: var(--gray-100);
  --c-highlight: rgba(255, 122, 89, 0.32);
  --c-selection: rgba(0, 189, 165, 0.4);
  --c-code: var(--teal-700);
  --c-code-b: var(--teal-200);
  --c-code-bg: var(--teal-100);

  // Glassmorphic backgrounds
  --alpha-1: 0.1;
  --alpha-2: 0.25;
  --alpha-3: 0.4;
  --alpha-4: 0.55;
  --alpha-5: 0.7;
  --glass-1: saturate(1.8) blur(1px);
  --glass-2: saturate(1.8) blur(4px);
  --glass-3: saturate(1.8) blur(8px);
  --glass-4: saturate(1.8) blur(13px);
  --glass-5: saturate(1.8) blur(19px);

  // State transition (used on form focus, button hover, link hover, and color utility hover)
  --ease: all 0.15s ease-in-out;

  @each $name,
  $value in $width {
    --#{$name}: #{$value};
  }

  @each $name,
  $value in $spacing {
    --sp-#{$name}: #{$value};
  }

  --b1: 1px; // used by b-thin, b-dashed, and --line-detail (hr, .table, form inputs, etc.)
  --b2: 4px; // used by b-thick
  --b3: 8px; // used by b-heavy

  --line-detail: var(--b1) solid var(--c-detail); // used on hr, table cell borders, inputs, classic tabs.

  // border radius for rounded corners
  --rad-sm: .25rem; // 4px default
  --rad: .5rem; // 8px default
  --rad-lg: 1rem; // 16px default
  --rad-xl: 2.5rem; // 40px default
  --rad-pill: 99em;
  --rad-circle: 50%;

  --sp-block: 0.5rem 1rem;

  --container: var(--w-xxl);
  --container-x-space: 1rem;

  --sq-sm: 3rem;
  --sq: 4.5rem;
  --sq-lg: 6rem;

  // Focus -- outline & shadow combo creates a white and black "checker" dotted 
  // line, visible over both light or dark backgrounds
  --focus-outline: 2px dotted black;
  --focus-shadow: 0 0 0 2px white;

  // Forms AND buttons
  // See also --c-form-* and --c-btn-* in colors above
  --form-b: var(--b1); // border
  --form-font: var(--font-ui);
  --form-size-sm: 2rem; // height
  --form-size: 2.5rem;
  --form-size-lg: 3rem;
  --form-size-sm-fs: 0.8325rem; // font-size
  --form-size-lg-fs: 1.325rem;
  --form-p-sm: 0.25rem 0.5rem; // padding
  --form-p: .5rem;
  --form-p-lg: .75rem;
  --form-focus: 0.1875rem;
  --btn-fw: 600;
  --btn-p-sm: .25rem .75rem;
  --btn-p: .5rem 1rem;
  --btn-p-lg: .75rem 1.75rem;

  // Headings (major third typographic scale, calculated from cSalculated by https: //type-scale.com)
  --h1: 2.488em;
  --h2: 2.074em;
  --h3: 1.728em;
  --h4: 1.44em;
  --h5: 1.2em;
  --h6: 1rem;

  // Heading size bump for MD (@ 1024px default)
  --h1-bump: 2.986em;
  --h2-bump: 2.488em;
  --h3-bump: 2.074em;
  --h4-bump: 1.728em;
  --h5-bump: 1.44em;
  --h6-bump: 1.2em;

  --hd-weight: normal;
  --hd-lh: calc(1em + .5rem); // gives .5rem more than the headingâ€™s own size

  // Text
  --t-fs: 100%; // font-size see https://betterwebtype.com/articles/2019/05/14/the-state-of-fluid-web-typography/
  --t-base-lh: 1.5; // line-height
  --t-thin-fw: 200;
  --t-base-fw: 400;
  --t-semi-fw: 600;
  --t-bold-fw: 700;
  --t-bolder-fw: 900;
  --t-cols-gap: clamp(1.5rem, 2.5vw, 2.5rem);
  --t-cols: 17.5em;
  --t-sm: max(.75em, 13.5px);
  // Bigger text ramps from XS (512px default) to LG (1280px)
  --t-lg: 1.25em;
  --t-display: clamp(1.25em, 0.75em + 1.5625vw, 2em);
  --t-long-read: clamp(1em, 0.8333em + 0.5208vw, 1.25em);
  --link: underline; // link text-decoration
  --bq-fs: var(--t-fs); // blockquote
  --bq-x: 2.5vw;
  --hr: var(--b1); // horizontal rule
  --hr-y: var(--t-base-lh);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// (5.) Media query mixins /////////////////////////////////////////////////////
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@mixin break-min($min-width) {
  @media (min-width: map-get($width, $min-width)) {
    @content;
  }
}

@mixin break-max($max-width) {
  @media (max-width: (map-get($width, $max-width) - 1px)) {
    @content;
  }
}